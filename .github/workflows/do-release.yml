---
name: Build new release

on:
  push:
    branches:
      - main

jobs:
  new-release:
    runs-on: ubuntu-latest
    if: "!startsWith(github.event.head_commit.message, '[SKIP]')"
    name: New release

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Setup Git
        run: |
          git config user.name " PiDroid-B Action New release"
          git config user.email 'pidroid-b@users.noreply.github.com'
#          git remote set-url origin https://x-access-token:${{ secrets.AC_GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
#          git checkout "${GITHUB_REF:11}"

      - name: Setup env variables
        run: |
          echo "SKIPBUMP=FALSE" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version setuptools wheel
          pip install Babel

#      - name: Check changelog
#        run: python tools/check_changelog.py

      - name: Compile i18n catalogs
        run: pybabel compile -d locale

      - name: Check i18n coverage
        id: i18nCoverage
        uses: alexkiro/i18n-coverage@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          translations-path: 'locale/**/LC_MESSAGES/*.po'

      - name: Update i18n badge
        run: |
          cat >> docs/BADGE_I18NCOVERAGE.rst <<- EOF
          .. image:: https://img.shields.io/badge/i18n Coverage-${{ steps.i18nCoverage.outputs.coverage }}%25-green
              :alt: i18n Coverage ${{ steps.i18nCoverage.outputs.coverage }}%

          EOF
          git add .
#          badge="s#.. image:: https://img.shields.io/badge/i18n Coverage-.*\$#.. image:: https://img.shields.io/badge/i18n Coverage-${{ steps.i18nCoverage.outputs.coverage }}%25-green#"
#          alt="s#:alt: i18n Coverage .*\$#:alt: i18n Coverage ${{ steps.i18nCoverage.outputs.coverage }}%#"
#          sed -ri "$badge" README.rst
#          sed -ri "$alt" README.rst

      - name: Bump Major Version
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          bump2version minor --allow-dirty
          echo "SKIPBUMP=TRUE" >> $GITHUB_ENV
        if: "startsWith(github.event.head_commit.message, '[MAJOR]')"

      - name: Bump Minor Version
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          bump2version minor --allow-dirty
          echo "SKIPBUMP=TRUE" >> $GITHUB_ENV
        if: "startsWith(github.event.head_commit.message, '[FEATURE]')"

      # Default action
      - name: Bump Patch Version
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          bump2version patch --allow-dirty
        if: env.SKIPBUMP == 'FALSE'

      - name: Commit version change to master
        run: |
          git push --follow-tags

#      - name: Generate base.pot
#        run: pybabel extract -o locale/base.pot pidroidbot_discord/
#
##      for each new lang
##      pybabel init -l en_US -i locale/base.pot -d locale
#
#      - name: Upadate catalogs
#        run: pybabel update -i locale/base.pot -d locale

#      - name: Compile catalogs
#        run: pybabel compile -d locale
#
#      - name: Push upgrades
#        uses: JamesIves/github-pages-deploy-action@releases/v3
#        with:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          BRANCH: internationalization
#          FOLDER: "."
##          FOLDER: docs/build/html




#pybabel init -l fr_FR en_US -i locale/base.pot -d locale
#pybabel update -i locale/base.pot -d locale
#pybabel compile -d locale

#          for l in locale/*/ ; do
#            echo "--- Locale : $l ---"
#            # pybabel init -l en_US -i locale/base.pot -d locale
#            pybabel update -d locale -l "$l" -i locale/base.pot -D "base"
#            pybabel compile -d locale -l "$l" -D "base"
#          done

#          for f in locale/**/LC_MESSAGES/*.po ; do
#            pybabel update -i locale/base.pot -o "$f"
#            pybabel compile -i "$f" -o "${f%.*}.mo"
#          done

#            msgmerge --update "$f" locale/base.pot
#            msgfmt -o "${f_po%.*}.mo" "${f}"

#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install pygettext

#    - name: Install GNU gettext
#      run: sudo apt-get install gettext
#
#
#
#
#
#    - name: CCheck i18n format
#      run: |
#        for i in pidroidbot_discord/locale/**/*.po ; do
#          echo "checking $i..."
#          msgfmt -v -c -o /dev/null $i
#        done
#
#    - name: Check i18n coverage
#      id: i18nCoverage
#      uses: alexkiro/i18n-coverage@v1.0.0
#      with:
#        token: ${{ secrets.GITHUB_TOKEN }}
#        translations-path: 'pidroidbot_discord/locale/**/*.po'
#
#    - name: Get the coverage
#      run: echo "The coverage was ${{ steps.i18nCoverage.outputs.coverage }}"